#!/usr/bin/env ruby

require 'pty'
require 'optparse'

require 'rubcat'

cmd = "adb logcat"

opt = OptionParser.new

OPTS = {}

opt.on('-d') { |v| cmd << " -d" }
opt.on('-l {V,D,I,W,E,F}', '--level={V,D,I,W,E,F}', 'Minimul level to display') { |v|
  if %w{V D I W E F}.include? v
    OPTS[:min_level] = v.to_sym
  else
    raise OptionParser::ParseError, "Invalid choice: 'A' (choose from 'V', 'D', 'I', 'W', 'E', 'F')"
  end
}
opt.on('-s DEVICE_SERIAL', '--serial=DEVICE_SERIAL') { |v| cmd << " -s #{v}" }
opt.on('-d', 'Use first device for log input (adb -d option)') { |v| cmd << " -d" }
opt.on('-e', 'Use first emulator for log input (adb -e option)') { |v| cmd << " -e" }
opt.on('--tag-length=LENGTH', 'Length of tag shown in left of screen (default is 25)') { |v| OPTS[:tag_length] = Integer(v) }
opt.on('--split-tags', 'Insert empty line between tags') { |v| OPTS[:split_tags] = true }
opt.parse!

pl = Rubcat::PrettyLogcat.new OPTS

$PROGRAM_NAME = 'rubcat'

begin
  PTY.spawn cmd do |stdout, stdin, pid|
    begin
      # parse and print output
      stdout.each do |line|
        begin
          pl.echo line
        rescue => e
          puts line
        end
      end
    rescue Errno::EIO
      puts "Errno:EIO"
    end
  end
rescue PTY::ChildExited
  puts "PTY::ChildExited"
end

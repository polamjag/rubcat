#!/usr/bin/env ruby

require 'pty'

cmd = "adb logcat"

# -d to print and exit

class String
  # http://stackoverflow.com/questions/1489183/colorized-ruby-output
  def black;          "\033[30m#{self}\033[0m" end
  def red;            "\033[31m#{self}\033[0m" end
  def green;          "\033[32m#{self}\033[0m" end
  def brown;          "\033[33m#{self}\033[0m" end
  def blue;           "\033[34m#{self}\033[0m" end
  def magenta;        "\033[35m#{self}\033[0m" end
  def cyan;           "\033[36m#{self}\033[0m" end
  def gray;           "\033[37m#{self}\033[0m" end
  def bg_black;       "\033[40m#{self}\033[0m" end
  def bg_red;         "\033[41m#{self}\033[0m" end
  def bg_green;       "\033[42m#{self}\033[0m" end
  def bg_brown;       "\033[43m#{self}\033[0m" end
  def bg_blue;        "\033[44m#{self}\033[0m" end
  def bg_magenta;     "\033[45m#{self}\033[0m" end
  def bg_cyan;        "\033[46m#{self}\033[0m" end
  def bg_gray;        "\033[47m#{self}\033[0m" end
  def bold;           "\033[1m#{self}\033[22m" end
  def reverse_color;  "\033[7m#{self}\033[27m" end

  def randomize_color
    "\033[3#{self.hash % 6 + 1}m#{self}\033[0m"
  end

  def trim_and_rjust(len)
    if self.length > len
      self[-len .. -1]
    else
      self.rjust len
    end
  end
end


class PrettyLogcat
  attr_reader :last_tag, :tag_length
  def initialize(tag_length=30)
    @tag_length = tag_length
  end

  def parse_message(mes)
    {
      type: mes.match('^[VDIWEFS]').to_s,
      # tag: mes.match('^./([^(\s]*)')[1],
      tag: mes.match('^./(.*)\(\s*[0-9]+\):')[1].strip,
      pid: mes.match('^[^(]*\(\s*([0-9]+)\)')[1],
      message: mes.match("^[^:]+:\s*(.*)$")[1]
    }
  end

  def colorize_type(type)
    if type == "V"
      " #{type} ".bold.bg_gray.black
    elsif type == "D"
      " #{type} ".bold.bg_blue
    elsif type == "I"
      " #{type} ".bold.bg_green
    elsif type == "W"
      " #{type} ".bold.bg_brown
    else
      " #{type} ".bold.bg_red
    end
  end

  KNOWN_TAGS = %w{dalvikvm art dex2oat}

  def format_tag(tag)
    unless tag == @last_tag
      @last_tag = tag
      # puts # separate messages
      if KNOWN_TAGS.include? tag
        tag.trim_and_rjust(@tag_length).bold.black.bg_gray
      else
        tag.trim_and_rjust(@tag_length).randomize_color.bold
      end
    else
      " " * @tag_length
    end
  end

  def pretty_print(mes)
    buf = format_tag mes[:tag]

    buf += " "
    buf += colorize_type mes[:type]
    buf += " "
    buf += mes[:message]
    puts buf
  end

  def echo(mes)
    pretty_print parse_message mes
  end
end

pl = PrettyLogcat.new 25

begin
  PTY.spawn cmd do |stdout, stdin, pid|
    begin
      # parse and print output
      stdout.each do |line|
        begin
          pl.echo line
        rescue => e
          puts e
          puts line
        end
      end
    rescue Errno::EIO
      puts "Errno:EIO error, but this probably just means that the process has finished giving output"
    end
  end
rescue PTY::ChildExited
  puts "The child process exited!"
end
